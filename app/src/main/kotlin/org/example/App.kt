/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

class App {

}

fun main() {
    println("Candela de la Cruz")
    println("22 de abril de 2025")
    mostrarTiposDeDatos()
    rectangulo()
    println(NegPos0(5))
    println(esParOImpar(5))
    mostrarNumerosConLoops()
    LoopPares()
    factorial()
    saludar()
    baseExponente()
    demostrarAlcanceVariables()
    calcularPromedio()
    val lista = listOf(5, 2, 9, 1, 5, 6)
    val (maximo, minimo) = encontrarMaxMin(lista)
    println("El número más grande es: $maximo")
    println("El número más pequeño es: $minimo")

}

fun mostrarTiposDeDatos() {
    val nombre: String = "Candela"
    val edad: Int = 16
    val altura: Double = 1.63
    val esEstudiante: Boolean = true
    
    println("Nombre: $nombre")
    println("Edad: $edad")
    println("Altura: $altura")
    println("Es estudiante: $esEstudiante")
}

fun rectangulo() {
    val height: Int = 35
    val width: Int = 3
    val area = height * width

    println("La altura del rectángulo es: $height y el ancho es: $width. por lo tanto su área es de: $area" )
}
fun esParOImpar(numero: Int): String {
    return when {
        numero % 2 == 0 -> "Par"
        else -> "Impar"
    }
}

fun NegPos0(numero:Int): String {
    return when {
        numero > 0 -> "El número es positivo"
        numero < 0 -> "El número es negativo"
        else -> "El número es cero"
    }
}

fun mostrarNumerosConLoops() {

    println("Usando for:")
    for (i in 1..10) {
        println(i)
    }

    println("\nUsando while:")
    var j = 1
    while (j <= 10) {
        println(j)
        j++
    }
    

    println("\nUsando do-while:")
    var k = 0
    do {
        println(k)
        k++
    } while (k <= 10)
}


fun LoopPares() {
    println("Usando for:")
    for (i in 0..20 step 2) {
        println(i)
    }
    

    println("Usando while:")
    var j = 2
    while (j <= 20) {
        println(j)
        j+=2
    }
    

    println("Usando do-while:")
    var k = 2
    do {
        println(k)
        k+=2
    } while (k <= 20)
}

fun factorial(n: Int= 4): Int {
    return if (n <= 1) 1 else n * factorial(n - 1)
}

fun saludar(nombre: String ="Candela", edad: Int = 16) {
    println("Hola $nombre, tienes $edad años")
}

fun baseExponente() {
    val base = 2.0
    val exponente = 3.0
    val resultado = Math.pow(base, exponente)
    println("$base elevado a $exponente es: $resultado")
}

fun demostrarAlcanceVariables() {

    val varGlobal = "Soy global acá"
    
    if (true) {
        val variableIf = "local del if"
        println("if: $variableIf")
        println("acceder a: $varGlobal")
    }
    
    // Bloque for con su propio ámbito
    for (i in 1..3) {
        val variableFor = "local del for - iteración $i"
        println("Dentro del for: $variableFor")
        println("Puedo acceder a: $varGlobal")
    }
    
    println("Desde fuera del if y for, solo puedo acceder a: $varGlobal")
}

fun calcularPromedio() {
    val numeros = listOf(10, 20, 30, 40, 50) // Lista local
    var suma = 0  // Variable local mutable
    var contador = 0  // Variable local mutable
    
    for (numero in numeros) {
        suma += numero
        contador++
    }
    
    val promedio = if (contador > 0) suma.toDouble() / contador else 0.0
    println("El promedio de $numeros es: $promedio")
}

fun encontrarMaxMin(numeros: List<Int>): Pair<Int, Int> {
    if (numeros.isEmpty()) {
        return Pair(Int.MIN_VALUE, Int.MAX_VALUE) // O una excepción
    }

    var maximo = numeros[0]
    var minimo = numeros[0]

    for (numero in numeros) {
        if (numero > maximo) {
            maximo = numero
        }
        if (numero < minimo) {
            minimo = numero
        }
    }

    return Pair(maximo, minimo)
}